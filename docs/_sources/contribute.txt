   :github_url: https://github.com/kasperdokter/Reo/blob/master/reo-docsite/src/site/sphinx/index.rst

Contribute
==========

This page describes how to contribute to the Lykos Reo compiler.

Clone the repository
--------------------

Confirm with ``git --version`` that Git is installed on your system.
Clone the git repository::

	git clone https://kasperdokter@bitbucket.org/kasperdokter/lykos.git

.. note:: At the time of writing, this repository is private.

The structure of follows the standard Java conventions. All (manually implemented) source code can be found in the ``src`` folder.
This folder contains two subfolders, namely ``main`` and ``site``.
The ``site`` subfolder contains the sources of this website.
The ``main`` subfolder contains the sources of the Lykos compiler, which consists of three parts: 

1. a folder ``antlr4`` that contains the ANLTR4 grammar files of the Reo language.

2. a folder ``java`` that contains the Java sources of the Lykos compiler.

3. a folder ``st4`` that contains the String Templates for code generation.

The java source code in the ``java`` folder is completely documented using Javadoc. 
Below, we show how to generate the Javadoc documentation.
For further  details on ANTLR4, we refer to the manual [Parr13]_.

Build the project
-----------------

This compiler project is build using Apache Maven, a software project management and comprehension tool. 
Confirm with ``mvn -v`` that Maven is installed on your system.
Otherwise (on Ubuntu), run command::

	sudo apt-get install maven

to install the latest Apache Maven.

Maven automatically takes care of all the dependencies of this project (such as the dependency on ANTLR4 for lexer and parser generation).

To build the project, run::

	mvn package
	
This Maven command creates a folder called ``target`` that contains all generated lexer and parser sources as well as all executable code.
To be precise, it generates an self-contained executable Java archive ``target/lykos-1.0.jar`` that contains the Lykos Reo compiler.

The source code is documented using Javadoc. The static Javadoc documentation of the Lykos Reo compiler can be generated by running::

	mvn javadoc:javadoc
	
The sources of the documentation that you are currently reading can be generated by running::

	mvn site


Setting up Eclipse
------------------

If you use Eclipse as development environment, run::

	mvn eclipse:eclipse

to generate eclipse configuration files, such as ``.project`` and ``.classpath``.
Manually define the M2_REPO classpath variable in Eclipse IDE as follows:

1. Eclipse IDE, menu bar;
2. Select Window > Preferences;
3. Select Java > Build Path > Classpath Variables;
4. Click on the new button > define a new variable called ``M2_REPO`` and point it to your local Maven repository (i.e., ``~/.m2/repository`` in Linux).

Adding my own semantics to Lykos
--------------------------------

Lykos' program logic for parsing of Reo files is completely independent of the actual semantics of Reo components.
It is therefore pretty easy to extend the current version of Lykos for parsing a new kind of semantics for Reo components.
Let us now describe step-by-step how to implement a new semantics, and how to get Lykos to parse it.

First, we need to create a new package, called ``nl.cwi.reo.<new semantics>``.
Next, we add a class ``<new semantic object>.java`` to this package. 
Since Lykos accepts arbitrary Java objects as semantics for Reo components, there is no need to inherit special interfaces.

 

Structure of this repository
----------------------------

As Lykos is a Java project, we applied the standard directory structure induced by Maven.
The `src/main/` directory contains all (manually implemented) source files of the project, such as the compiler and the ANTLR4 grammar.
Maven automatically generates the lexer and parser sources for the grammars from `src/main/antlr4` into `targer/generated-sources/antlr4`.
Directory `src/main/java` contains the main compiler program `Compiler.java`, a directory `automata` containing the implementation of Work Automata, and a directory `graphgames` containing the implementation of strategy synthesis algorithms for graph games.
Directory `src/main/antlr4` contains a [ANTLR4](https://github.com/antlr/antlr4) grammar file `Reo.g4` for protocol specification, and a grammar file `TIGA.g4` for parsing strategies produced by UPPAAL TIGA.

 For more information on how Reo is parsed, see [parser](docs/parser.md)

Future work
-----------

Since this is a young project, many features are yet to be implemented:

 - Syntax highlighting of Reo specifications in Eclipse
 - Autocompletion or Reo specifications
 - Bundling of source code into packages to avoid name conflicts
 - Generating an MCRL2 specification from a Reo connector to enable model checking
 - Generation of propositional formulas with linear arithmetic from Timed Constraint Automata, for use in bounded model checking 
 - Develop a graphical editor that is synchronized with a textual representation
 - Implement dynamic reconfiguration of connectors using algebraic graph transformations
 
 
References
----------

.. [Parr13] Terence Parr. 2013. The Definitive ANTLR 4 Reference (2nd ed.). Pragmatic Bookshelf. 
